def classify0(inX,dataSet,labels,k):           #--->标注1
    dataSetSize=dataSet.shape[0]               #--->标注2  
    diffMat=tile(inX,(dataSetSize,1)-dataSet   #--->标注3
    sqDiffMat=diffMat**2
    sqDistances=sqDiffMat.sum(axis=1)          #--->标注4    
    distances=sqDistances**0.5
    sortDistIndices=distances.argsort()        #--->标注5 
    classCount={}
    for i in range(k):
        voteIlabel=labels[sortedDisIndicies[i]]                                         #--->标注8
        classCount[voteIlabel]=classCount.get(voteIlabel,0)+1                           #--->标注6    
sortedClassCount=sorted(classCount.items(),key=operator.itemgetter(1),reverse=True)     #--->标注7 
return (sortedClassCount[0][0])

####################以上都是对数组做运算，因为要使a**2能够计算，则a.shape必须是（n,n）,即方阵才能做平方运算
标注1：inX为待分类的数据，dataSet为已知数据集，label为标签向量，k为需要提取的数目
标注2：###有多少个数据集，a.shape[0]为计算a有多少组（行）数据，这里先不计算每组数据有多少个特征###
    ################,c=a.shape为计算数组a有多少行多少列###################################
标注3：####先使用tile函数将inX数组（or矩阵）变成一个dataSetSize行，每列一组数据的inX矩阵，既将inX复制dataSetSize行，然后减去已知数据集
    >>> b=[1,3,5]
    >>> tile(b,[2,3])
        array([[1, 3, 5, 1, 3, 5, 1, 3, 5],
              [1, 3, 5, 1, 3, 5, 1, 3, 5]])          
    >>> a=[[1,2,3],[5,4]]
    >>> tile(a,[2,3])
        array([[[1, 2, 3], [5, 4], [1, 2, 3], [5, 4], [1, 2, 3], [5, 4]],
              [[1, 2, 3], [5, 4], [1, 2, 3], [5, 4], [1, 2, 3], [5, 4]]])          
标注4：####sum(axis=0)为列求和，sum(axis=1)位行求和；同理sort(axis=0)为列排序，sort(axis=1)位行排序
    >>> np.sum([[0, 1], [0, 5]], axis=0)
        array([0, 6])
    >>> np.sum([[0, 1], [0, 5]], axis=1)
        array([1, 5])
标注5：####argsort函数返回的是数组值从小到大的索引值####
    ####One dimensional array:一维数组
        >>> x = np.array([3, 1, 2])
        >>> np.argsort(x)       #按升序排列
            array([1, 2, 0])
        >>> np.argsort(-x)      #按降序排列
            array([0, 2, 1])    
        >>> x = np.array([[0, 3], [2, 2]])
        >>> np.argsort(x, axis=0) #按列排序,同理按行排序只需axis=1
            array([[0, 1],
                   [1, 0]])
标注6：####x.get(a,0)返回字典中a的键值，如果没有此键值，则返回0####
        
    sortedClassCount=sorted(classCount.iteritems(),key=operator.iteriter(1),reverse=True)   #--->标注7
    ####dict.items()以列表返回可遍历的(键, 值) 元组数组,python3已经取消了iteritem()函数####
     >>>dict = {'Name': 'Runoob', 'Age': 7}    
     >>>dict.items()
        dict_items([('Age', 7), ('Name', 'Runoob')])
     >>>dict = {'Name': 'Runoob', 'Age': 7}
     >>>       for i,j in dict.items():
     >>>       print(i, ":\t", j) 
            Name :   Runoob
            Age :    7
标注7：####sorted(iterable[, cmp[, key[, reverse]]])####
         参数说明：
        iterable -- 可迭代对象。
        cmp -- 比较的函数，这个具有两个参数，参数的值都是从可迭代对象中取出，此函数必须遵守的规则为，大于则返回1，小于则返回-1，等于则返回0。
        key -- 主要是用来进行比较的元素，只有一个参数，具体的函数的参数就是取自于可迭代对象中，指定可迭代对象中的一个元素来进行排序。
        reverse -- 排序规则，reverse = True 降序 ， reverse = False 升序（默认）
        
        >>>a = [1,2,3] 
        >>>b=operator.itemgetter(1,0)   ####//定义函数b，获取对象的第1个域和第0个的值
        >>>b(a)
           (2,1)
           
       import operator
       L=[('b',2,4),('a',1,3),('c',3,1),('d',4,2)]
       a=sorted(L, key=operator.itemgetter(1),reverse=True)  
       b=sorted(L, key=lambda x:x[2],reverse=False)
       print (a,"\n",b) 
输出为：[('d', 4, 2), ('c', 3, 1), ('b', 2, 4), ('a', 1, 3)] 
       [('c', 3, 1), ('d', 4, 2), ('a', 1, 3), ('b', 2, 4)]
       所以operator.itemgetter(1)等价于lambda x:x[1]
       
标注8：假设distances=[4,3,1,2],那么sortDistIndices则是[2,3,1,0],所以labels(sortDistIndices(0))=labels(2)='B',所以distances可        以看成[A,A,B,B],sortDistIndices没有任何作用，它就像一个中间容器，通过它，我们可以轻松将distances映射到labels中
